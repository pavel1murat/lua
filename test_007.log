Option: --verbose, arg ""
>>>>>>>>>>>>>> converting FCL to LUA ...
[convert_file] : @verbose = 1 START
before substitution line=# Read the test file made by MakeTestProduct and
after substitution line=# Read the test file made by MakeTestProduct and
-- # Read the test file made by MakeTestProduct and
before substitution line=# modified by ModifyTestProduct
after substitution line=# modified by ModifyTestProduct
-- # modified by ModifyTestProduct
before substitution line=#
after substitution line=#
-- #

require 'Offline/fcl/minimalMessageService'

before substitution line=process_name : modifyTrackSPM
after substitution line=process_name = modifyTrackSPM
>>>> parse_assignment: text:'process_name = modifyTrackSPM' comment:''
--- w1:modifyTrackSPM is_number:
process_name  = "modifyTrackSPM" ;

before substitution line=source : {
after substitution line=source = {
>>>> parse_assignment: text:'source = {' comment:''
source = new {
before substitution line=  module_type : RootInput
after substitution line=  module_type = RootInput
>>>> parse_assignment: text:'  module_type = RootInput' comment:''
--- w1:RootInput is_number:
  module_type  = "RootInput" ;
before substitution line=  fileNames   :  ["testG4S4pionSimDOE_01.art" ]
after substitution line=  fileNames   =  {"testG4S4pionSimDOE_01.art" }
>>>> parse_assignment: text:'  fileNames   =  {"testG4S4pionSimDOE_01.art" }' comment:''
>>> 0:ww2:   { "testG4S4pionSimDOE_01.art"  } 
>>> 1: ww2:'   { "testG4S4pionSimDOE_01.art"  } '
>>> 1: w3:'["{", "\"testG4S4pionSimDOE_01.art\"", "}"]'
>>> 1: w:'"testG4S4pionSimDOE_01.art"'
>>> 2: w: "testG4S4pionSimDOE_01.art"
outp:
{ "testG4S4pionSimDOE_01.art"}
001 returning: line:  fileNames    = new { "testG4S4pionSimDOE_01.art"};
  fileNames    = new { "testG4S4pionSimDOE_01.art"};
before substitution line=}
after substitution line=}
};

before substitution line=services : {
after substitution line=services = {
>>>> parse_assignment: text:'services = {' comment:''
services = new {
before substitution line=  message : @local::default_message
after substitution line=  message = @local@@default_message
>>>> parse_assignment: text:'  message = @local@@default_message' comment:''
--- w1:@local@@default_message is_number:
  message = default_message ; 
before substitution line=}
after substitution line=}
};

before substitution line=physics : {
after substitution line=physics = {
>>>> parse_assignment: text:'physics = {' comment:''
physics = new {

before substitution line=  producers : {
after substitution line=  producers = {
>>>> parse_assignment: text:'  producers = {' comment:''
  producers = new {
before substitution line=    deuteronMixer : {
after substitution line=    deuteronMixer = {
>>>> parse_assignment: text:'    deuteronMixer = {' comment:''
    deuteronMixer = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "deuteronMixer:tracker"
after substitution line=      productTag  = "deuteronMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "deuteronMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "deuteronMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    ootMixer      : {
after substitution line=    ootMixer      = {
>>>> parse_assignment: text:'    ootMixer      = {' comment:''
    ootMixer      = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "ootMixer:tracker"
after substitution line=      productTag  = "ootMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "ootMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "ootMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    flashMixer    : {
after substitution line=    flashMixer    = {
>>>> parse_assignment: text:'    flashMixer    = {' comment:''
    flashMixer    = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "flashMixer:tracker"
after substitution line=      productTag  = "flashMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "flashMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "flashMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    photonMixer   : {
after substitution line=    photonMixer   = {
>>>> parse_assignment: text:'    photonMixer   = {' comment:''
    photonMixer   = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "photonMixer:tracker"
after substitution line=      productTag  = "photonMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "photonMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "photonMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    neutronMixer  : {
after substitution line=    neutronMixer  = {
>>>> parse_assignment: text:'    neutronMixer  = {' comment:''
    neutronMixer  = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "neutronMixer:tracker"
after substitution line=      productTag  = "neutronMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "neutronMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "neutronMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    dioMixer      : {
after substitution line=    dioMixer      = {
>>>> parse_assignment: text:'    dioMixer      = {' comment:''
    dioMixer      = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "dioMixer:tracker"
after substitution line=      productTag  = "dioMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "dioMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "dioMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=    protonMixer   : {
after substitution line=    protonMixer   = {
>>>> parse_assignment: text:'    protonMixer   = {' comment:''
    protonMixer   = new {
before substitution line=      module_type : ModifyTrackSPM
after substitution line=      module_type = ModifyTrackSPM
>>>> parse_assignment: text:'      module_type = ModifyTrackSPM' comment:''
--- w1:ModifyTrackSPM is_number:
      module_type  = "ModifyTrackSPM" ;
before substitution line=      productTag  : "protonMixer:tracker"
after substitution line=      productTag  = "protonMixer = tracker"
>>>> parse_assignment: text:'      productTag  = "protonMixer = tracker"' comment:''
 >>> 3 line:
      productTag  = "protonMixer = tracker"
before substitution line=    }
after substitution line=    }
    };
before substitution line=  }
after substitution line=  }
  };

before substitution line= t1 : [ deuteronMixer, ootMixer, flashMixer, photonMixer, neutronMixer, dioMixer, protonMixer ]
after substitution line= t1 = { deuteronMixer, ootMixer, flashMixer, photonMixer, neutronMixer, dioMixer, protonMixer }
>>>> parse_assignment: text:' t1 = { deuteronMixer, ootMixer, flashMixer, photonMixer, neutronMixer, dioMixer, protonMixer }' comment:''
>>> 0:ww2:  {  deuteronMixer, ootMixer, flashMixer, photonMixer, neutronMixer, dioMixer, protonMixer  } 
>>> 1: ww2:'  {  deuteronMixer ,  ootMixer ,  flashMixer ,  photonMixer ,  neutronMixer ,  dioMixer ,  protonMixer  } '
>>> 1: w3:'["{", "deuteronMixer", ",", "ootMixer", ",", "flashMixer", ",", "photonMixer", ",", "neutronMixer", ",", "dioMixer", ",", "protonMixer", "}"]'
>>> 1: w:'deuteronMixer'
>>> 2: w: "deuteronMixer"
>>> 1: w:'ootMixer'
>>> 2: w: "ootMixer"
>>> 1: w:'flashMixer'
>>> 2: w: "flashMixer"
>>> 1: w:'photonMixer'
>>> 2: w: "photonMixer"
>>> 1: w:'neutronMixer'
>>> 2: w: "neutronMixer"
>>> 1: w:'dioMixer'
>>> 2: w: "dioMixer"
>>> 1: w:'protonMixer'
>>> 2: w: "protonMixer"
outp:
{ "deuteronMixer", "ootMixer", "flashMixer", "photonMixer", "neutronMixer", "dioMixer", "protonMixer"}
001 returning: line: t1  = new { "deuteronMixer", "ootMixer", "flashMixer", "photonMixer", "neutronMixer", "dioMixer", "protonMixer"};
 t1  = new { "deuteronMixer", "ootMixer", "flashMixer", "photonMixer", "neutronMixer", "dioMixer", "protonMixer"};
before substitution line= e1 : [ out1 ]
after substitution line= e1 = { out1 }
>>>> parse_assignment: text:' e1 = { out1 }' comment:''
>>> 0:ww2:  {  out1  } 
>>> 1: ww2:'  {  out1  } '
>>> 1: w3:'["{", "out1", "}"]'
>>> 1: w:'out1'
>>> 2: w: "out1"
outp:
{ "out1"}
001 returning: line: e1  = new { "out1"};
 e1  = new { "out1"};

before substitution line= trigger_paths : [ t1 ]
after substitution line= trigger_paths = { t1 }
>>>> parse_assignment: text:' trigger_paths = { t1 }' comment:''
>>> 0:ww2:  {  t1  } 
>>> 1: ww2:'  {  t1  } '
>>> 1: w3:'["{", "t1", "}"]'
>>> 1: w:'t1'
>>> 2: w: "t1"
outp:
{ "t1"}
001 returning: line: trigger_paths  = new { "t1"};
 trigger_paths  = new { "t1"};
before substitution line= end_paths     : [ e1 ]
after substitution line= end_paths     = { e1 }
>>>> parse_assignment: text:' end_paths     = { e1 }' comment:''
>>> 0:ww2:  {  e1  } 
>>> 1: ww2:'  {  e1  } '
>>> 1: w3:'["{", "e1", "}"]'
>>> 1: w:'e1'
>>> 2: w: "e1"
outp:
{ "e1"}
001 returning: line: end_paths      = new { "e1"};
 end_paths      = new { "e1"};

before substitution line=}
after substitution line=}
};

before substitution line=outputs : {
after substitution line=outputs = {
>>>> parse_assignment: text:'outputs = {' comment:''
outputs = new {
before substitution line=  out1 : {
after substitution line=  out1 = {
>>>> parse_assignment: text:'  out1 = {' comment:''
  out1 = new {
before substitution line=    module_type : RootOutput
after substitution line=    module_type = RootOutput
>>>> parse_assignment: text:'    module_type = RootOutput' comment:''
--- w1:RootOutput is_number:
    module_type  = "RootOutput" ;
before substitution line=    fileName    : "sim.owner.DNBtrackerTestDM.version.sequencer.art"
after substitution line=    fileName    = "sim.owner.DNBtrackerTestDM.version.sequencer.art"
>>>> parse_assignment: text:'    fileName    = "sim.owner.DNBtrackerTestDM.version.sequencer.art"' comment:''
--- w1:"sim.owner.DNBtrackerTestDM.version.sequencer.art" is_number:
    fileName     = "sim.owner.DNBtrackerTestDM.version.sequencer.art" ;
before substitution line=    outputCommands:   [ "keep *_*_*_*",
after substitution line=    outputCommands =   { "keep *_*_*_*",
>>>> parse_assignment: text:'    outputCommands =   { "keep *_*_*_*",' comment:''
>>> 0:ww2:    {  "keep *_*_*_*",
q:'    {  "keep *_*_*_*",'
q1:"keep *_*_*_*" q2:"keep^^^*_*_*_*"
>>> 1: ww2:'    {  "keep^^^*_*_*_*" , '
>>> 1: w3:'["{", "\"keep^^^*_*_*_*\"", ","]'
>>> 1: w:'"keep^^^*_*_*_*"'
>>> 2: w: "keep^^^*_*_*_*"
outp:
{ "keep^^^*_*_*_*",
001 returning: line:    outputCommands  = new { "keep *_*_*_*",
    outputCommands  = new { "keep *_*_*_*",
before substitution line=                        "drop *_deuteronMixer_tracker_MixPBI",
after substitution line=                        "drop *_deuteronMixer_tracker_MixPBI",
                        "drop *_deuteronMixer_tracker_MixPBI",
before substitution line=                        "drop *_ootMixer_tracker_MixPBI",
after substitution line=                        "drop *_ootMixer_tracker_MixPBI",
                        "drop *_ootMixer_tracker_MixPBI",
before substitution line=                        "drop *_flashMixer_tracker_MixPBI",
after substitution line=                        "drop *_flashMixer_tracker_MixPBI",
                        "drop *_flashMixer_tracker_MixPBI",
before substitution line=                        "drop *_photonMixer_tracker_MixPBI",
after substitution line=                        "drop *_photonMixer_tracker_MixPBI",
                        "drop *_photonMixer_tracker_MixPBI",
before substitution line=                        "drop *_neutronMixer_tracker_MixPBI",
after substitution line=                        "drop *_neutronMixer_tracker_MixPBI",
                        "drop *_neutronMixer_tracker_MixPBI",
before substitution line=                        "drop *_dioMixer_tracker_MixPBI",
after substitution line=                        "drop *_dioMixer_tracker_MixPBI",
                        "drop *_dioMixer_tracker_MixPBI",
before substitution line=                        "drop *_protonMixer_tracker_MixPBI",
after substitution line=                        "drop *_protonMixer_tracker_MixPBI",
                        "drop *_protonMixer_tracker_MixPBI",
before substitution line=                        "drop *_TriggerResults_*_modifyTrackSPM"
after substitution line=                        "drop *_TriggerResults_*_modifyTrackSPM"
                        "drop *_TriggerResults_*_modifyTrackSPM" ;
before substitution line=                      ]
after substitution line=                      }
                      };

before substitution line=  }
after substitution line=  }
  };
before substitution line=}
after substitution line=}
};
